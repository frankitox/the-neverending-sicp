; context
(define first-frame car)
(define make-frame cons)
(define frame-variables car)
(define frame-values cdr)
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (frame-variables frame)))
  (set-cdr! frame (cons val (frame-values frame))))
(define enclosing-environment cdr)
(define the-empty-environment ())
(define (extend-environment vars vals base-env)
  (if (eq? (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (count vars) (count vals))
      (error "More variables than values" vars vals)
      (error "More values than variables" vals vars))))

; Exercise.
(define (make-unbound! var env)
  (define (scan vars vals)
    (cond ((null? (cdr vars))
           (error "Variable" var "not found."))
          ((eq? var (cadr vars))
           (begin (set-cdr! vars (cddr vars))
                  (set-cdr! vals (cddr vals))))
          (else (scan (cdr vars) (cdr vals)))))
  (if (eq? the-empty-environment env)
    (error "Variable" var "not found.")
    (let* ((frame (first-frame env))
           (vars (frame-variables frame))
           (vals (frame-values frame)))
      (cond ((null? vars)
             (error "Variable" var "not found."))
            ((and (null? (cdr vars))
                  (not (eq? var (car vars))))
             (error "Variable" var "not found."))
            ((and (eq? var (car vars)))
             (begin (set-car! frame (cdr vars))
                    (set-cdr! frame (cdr vals))))
            (else (scan vars vals))))))
